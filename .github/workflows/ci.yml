name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test:
    name: Test on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
        include:
          # Test on older macOS with x64 architecture
          - os: macos-13
            python-version: "3.12"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git-based versioning

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: |
          **/pyproject.toml
          **/requirements*.txt

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"
        uv pip install pytest pytest-cov pytest-timeout pytest-xdist

    - name: Install Playwright browsers
      run: |
        uv run playwright install chromium
        uv run playwright install-deps chromium

    - name: Run linting
      run: |
        uv run ruff check src tests
        uv run ruff format --check src tests

    - name: Run type checking
      if: matrix.os == 'ubuntu-latest'  # Only run on one platform to save time
      run: |
        uv pip install mypy types-requests
        uv run mypy src --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v --cov=src/playwrightauthor --cov-report=xml --cov-report=term --timeout=120
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Test Chrome finding functionality
      run: |
        uv run python -c "from playwrightauthor.browser.finder import find_chrome_executable; from playwrightauthor.utils.logger import configure; logger = configure(True); path = find_chrome_executable(logger); print(f'Chrome found: {path}')"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install package
      run: |
        uv venv
        uv pip install -e .

    - name: Test CLI commands
      run: |
        uv run playwrightauthor --help
        uv run playwrightauthor status --verbose

    - name: Test browser installation
      run: |
        uv run python -m playwrightauthor.browser_manager --verbose
      continue-on-error: true  # Browser might already be installed

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build hatch hatchling hatch-vcs

    - name: Build package
      run: python -m build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    name: Release
    needs: [test, integration-test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}

    - name: Publish to PyPI
      if: "!contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*
